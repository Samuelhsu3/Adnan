
library(readxl)
library(dplyr)
library(tidyr)
library(writexl)
library(ggplot2)
library(tibble) 
library(ppcor)  


data2 <- read_excel("Replication of Adnan's Paper (Results Sum+Lit Review).xlsx",
                    sheet = "FA values + NeuroPsych",
                    na = c("NA", "-", "none", ""))

roi_cols <- c("genu of CC", "body of CC", "splenium of CC", "column/body of fornix",
              "anterior limb of interior capsule R", "anterior limb of interior capsule L",
              "posterior limb of interior capsule R", "posterior limb of interior capsule L",
              "Fornix crux R", "fornix crux L", "uncinate fasciculus R", "uncinate fasciculus L")
fornix_rois_change <- c("column/body of fornix", "Fornix crux R", "fornix crux L") 

initial_test_score_cols <- c("ravlttotz", "ravltldz", "rvdlttotz", "rvdltld", "lm1ss", "lm2ss")
initial_covariate_cols <- c("age", "yoe") # Used for partial correlations
initial_demographic_cols <- c(initial_covariate_cols, "sex", "Days_post_injury") 

existing_test_score_cols <- intersect(initial_test_score_cols, names(data2))
existing_covariate_cols <- intersect(initial_covariate_cols, names(data2)) 
existing_demographic_cols <- intersect(initial_demographic_cols, names(data2))

if(length(existing_test_score_cols) < length(initial_test_score_cols)){
  missing_ts <- setdiff(initial_test_score_cols, existing_test_score_cols)
  if(length(missing_ts) > 0) warning(paste("Some defined test score columns were not found in input data:", paste(missing_ts, collapse=", ")))
}
if(length(existing_covariate_cols) < length(initial_covariate_cols)){ 
  missing_covs <- setdiff(initial_covariate_cols, existing_covariate_cols)
  if(length(missing_covs) > 0) warning(paste("Some defined core covariate columns (age, yoe) were not found in input data:", paste(missing_covs, collapse=", ")))
}
if (!"Days_post_injury" %in% existing_demographic_cols && "Days_post_injury" %in% initial_demographic_cols) {
  warning("Column 'Days_post_injury' was not found in the input data. This is critical for some analyses if they were to use it.")
}

if (length(roi_cols) > 0 && all(roi_cols %in% names(data2))) { data2[roi_cols] <- lapply(data2[roi_cols], as.character) }
if (length(existing_test_score_cols) > 0) { data2[existing_test_score_cols] <- lapply(data2[existing_test_score_cols], as.character) }
if (length(existing_demographic_cols) > 0) { for(col in existing_demographic_cols){ if(col %in% names(data2)) data2[[col]] <- as.character(data2[[col]]) }}

is_valid_numeric_entry <- function(x_val, col_name_for_check) { 
  if (col_name_for_check == "sex") { 
    is_placeholder <- tolower(as.character(x_val)) %in% c("na", "-", "none", "") 
    return(!is_placeholder && !is.na(x_val)) 
  }
  is_placeholder <- tolower(as.character(x_val)) %in% c("-", "none", "") 
  return(!is_placeholder & (!is.na(suppressWarnings(as.numeric(x_val))) | is.na(x_val)) )
}

check_subject <- function(sub_df, sub_id, current_roi_cols, 
                          current_test_score_cols, current_demo_cols, 
                          check_cognitive_and_demos_for_na = TRUE) { 
  timepoints <- c("5 months", "12 months", "24 months") 
  selected_rows <- list()
  sub_df$MRI_timepoint <- trimws(sub_df$MRI_timepoint)
  for (tp_label in timepoints) { 
    rows <- sub_df %>% dplyr::filter(MRI_timepoint == tp_label); if (nrow(rows) == 0) return(NULL) 
    if (length(current_roi_cols) > 0 && current_roi_cols[1] %in% names(rows)) { rows <- rows %>% dplyr::filter(sapply(.[[current_roi_cols[1]]], is_valid_numeric_entry, col_name_for_check = current_roi_cols[1])) } else if (length(current_roi_cols) > 0) { return(NULL) }
    if (nrow(rows) == 0) return(NULL)
    actual_roi_cols_in_rows <- intersect(current_roi_cols, names(rows)); if(length(current_roi_cols) > 0 && length(actual_roi_cols_in_rows) != length(current_roi_cols)) return(NULL)
    if (length(actual_roi_cols_in_rows) > 0) { roi_data_for_tp <- rows %>% dplyr::select(all_of(actual_roi_cols_in_rows)); all_rois_are_potentially_numeric <- apply(roi_data_for_tp, 1, function(row_data){all(sapply(row_data, function(val) !is.na(suppressWarnings(as.numeric(as.character(val)))) || is.na(val)))}); rows <- rows[all_rois_are_potentially_numeric, ]; if (nrow(rows) == 0) return(NULL); numeric_roi_data <- rows %>% dplyr::select(all_of(actual_roi_cols_in_rows)) %>% dplyr::mutate(across(everything(), ~as.numeric(as.character(.)))); if (nrow(unique(numeric_roi_data)) > 1) return(NULL) }
    candidate_row <- rows[1, ]; if (length(actual_roi_cols_in_rows) > 0) { roi_values_for_na_check <- candidate_row %>% dplyr::select(all_of(actual_roi_cols_in_rows)) %>% dplyr::mutate(across(everything(), as.numeric)); if(any(is.na(roi_values_for_na_check))) return(NULL) }
    if ("Days_post_injury" %in% names(candidate_row)) { if(is.na(as.numeric(candidate_row[["Days_post_injury"]]))) return(NULL) } else { return(NULL) } 
    if (check_cognitive_and_demos_for_na) { 
      actual_test_cols_in_cand <- intersect(current_test_score_cols, names(candidate_row)); if (length(current_test_score_cols) > 0) { if (length(actual_test_cols_in_cand) != length(current_test_score_cols)) return(NULL); test_scores_values <- candidate_row %>% dplyr::select(all_of(actual_test_cols_in_cand)) %>% dplyr::mutate(across(everything(), as.numeric)); if (any(is.na(test_scores_values))) return(NULL) }
      actual_demo_cols_in_cand <- intersect(current_demo_cols, names(candidate_row)); if (length(current_demo_cols) > 0) { if (length(actual_demo_cols_in_cand) != length(current_demo_cols)) return(NULL); for(col in actual_demo_cols_in_cand){ if(col %in% c("age", "yoe")){ demo_val <- candidate_row[[col]]; if(is.na(as.numeric(demo_val))) return(NULL) }; if(col == "sex"){ sex_val <- as.character(candidate_row[[col]]); if(is.na(sex_val) || sex_val == "" || tolower(sex_val) == "na") return(NULL) }}}
    }
    selected_rows[[tp_label]] <- candidate_row 
  }
  return(bind_rows(selected_rows))
}


subject_groups_for_sub3ST <- data2 %>% dplyr::group_by(SubID) %>% dplyr::group_split()
subject_results_sub3ST <- lapply(subject_groups_for_sub3ST, function(sub_df) {if (nrow(sub_df) > 0 && "SubID" %in% names(sub_df)) {check_subject(sub_df, unique(sub_df$SubID)[1], current_roi_cols = roi_cols, current_test_score_cols = existing_test_score_cols, current_demo_cols = existing_demographic_cols, check_cognitive_and_demos_for_na = TRUE)} else { NULL }})
sub3ST <- bind_rows(subject_results_sub3ST[!sapply(subject_results_sub3ST, is.null)])
if (nrow(sub3ST) > 0) { 
  if(all(roi_cols %in% names(sub3ST))) sub3ST[roi_cols]<-lapply(sub3ST[roi_cols],function(x)as.numeric(as.character(x)))
  if(length(existing_test_score_cols)>0 && all(existing_test_score_cols %in% names(sub3ST)))sub3ST[existing_test_score_cols]<-lapply(sub3ST[existing_test_score_cols],function(x)as.numeric(as.character(x)))
  for(dem_col in existing_demographic_cols) { if (dem_col %in% names(sub3ST)) { if (dem_col %in% c("age", "yoe", "Days_post_injury")) { sub3ST[[dem_col]] <- as.numeric(as.character(sub3ST[[dem_col]])) }}}
  if ("SubID" %in% names(sub3ST)) sub3ST$SubID <- factor(sub3ST$SubID) 
} else { 
  cat("No subjects found for sub3ST. Correlation analyses will be skipped.\n"); sub3ST <- data.frame() 
}

subject_covariates_for_merge <- NULL 
if (length(existing_covariate_cols) > 0 && "SubID" %in% names(sub3ST) && nrow(sub3ST) > 0 && all(existing_covariate_cols %in% names(sub3ST))) {
  temp_sub3ST_for_cov_extraction <- sub3ST %>% dplyr::mutate(SubID = as.character(SubID)) 
  subject_covariates_for_merge <- temp_sub3ST_for_cov_extraction %>% dplyr::filter(MRI_timepoint=="5 months") %>% dplyr::select(SubID,all_of(existing_covariate_cols)) %>% dplyr::distinct(SubID,.keep_all=TRUE)
  if(nrow(subject_covariates_for_merge) < nrow(sub3ST%>%dplyr::distinct(SubID))){warning("Not all subjects in sub3ST have baseline covariates. Fallback.");subject_covariates_fallback<-temp_sub3ST_for_cov_extraction %>% dplyr::group_by(SubID) %>% dplyr::summarise(across(all_of(existing_covariate_cols),~first(na.omit(.))),.groups="drop") %>% tidyr::drop_na(all_of(existing_covariate_cols));if(nrow(subject_covariates_fallback)>nrow(subject_covariates_for_merge)){subject_covariates_for_merge<-subject_covariates_fallback}}
  if(nrow(subject_covariates_for_merge)==0){warning("Failed to extract subject covariates. Partial correlations will skip covariates or fail if covariates are mandatory.");subject_covariates_for_merge<-NULL} else { subject_covariates_for_merge$SubID <- factor(subject_covariates_for_merge$SubID) }
}

change_data_base_wide <- data.frame() 
if (nrow(sub3ST) > 0 ) {
  all_cols_for_pivot <- unique(c(intersect(existing_test_score_cols, names(sub3ST)), intersect(fornix_rois_change, names(sub3ST)), intersect(roi_cols, names(sub3ST)) ))
  all_cols_for_pivot <- intersect(all_cols_for_pivot, names(sub3ST))
  if (length(all_cols_for_pivot) > 0) {
    change_data_base_wide <- sub3ST %>% dplyr::select(SubID, MRI_timepoint, all_of(all_cols_for_pivot)) %>% tidyr::pivot_wider(names_from = MRI_timepoint, values_from = all_of(all_cols_for_pivot), names_glue = "{.value}_{MRI_timepoint}")
    if (!is.null(subject_covariates_for_merge) && nrow(subject_covariates_for_merge) > 0) { change_data_base_wide <- dplyr::left_join(change_data_base_wide, subject_covariates_for_merge, by = "SubID") }
    cat("Pre-calculating all delta scores (T2-T1) and ensuring actual scores are numeric...\n")
    for (region in fornix_rois_change) { c5<-paste0(region,"_5 months"); c12<-paste0(region,"_12 months"); c24<-paste0(region,"_24 months"); clean_region_name<-gsub("[ /]","_",region); n_delta_5_12<-paste0("delta_FA_",clean_region_name,"_5_12m"); if(all(c(c5,c12)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_5_12):=(as.numeric(.data[[c12]])-as.numeric(.data[[c5]])))}else{change_data_base_wide[[n_delta_5_12]]<-NA_real_}; n_delta_12_24<-paste0("delta_FA_",clean_region_name,"_12_24m"); if(all(c(c12,c24)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_12_24):=(as.numeric(.data[[c24]])-as.numeric(.data[[c12]])))}else{change_data_base_wide[[n_delta_12_24]]<-NA_real_}; n_delta_5_24<-paste0("delta_FA_",clean_region_name,"_5_24m"); if(all(c(c5,c24)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_5_24):=(as.numeric(.data[[c24]])-as.numeric(.data[[c5]])))}else{change_data_base_wide[[n_delta_5_24]]<-NA_real_} }
    for (test_col in existing_test_score_cols) { c5<-paste0(test_col,"_5 months"); c12<-paste0(test_col,"_12 months"); c24<-paste0(test_col,"_24 months"); clean_test_name<-gsub("[ /]","_",test_col); if(c5%in%names(change_data_base_wide))change_data_base_wide[[c5]]<-as.numeric(change_data_base_wide[[c5]]); if(c12%in%names(change_data_base_wide))change_data_base_wide[[c12]]<-as.numeric(change_data_base_wide[[c12]]); if(c24%in%names(change_data_base_wide))change_data_base_wide[[c24]]<-as.numeric(change_data_base_wide[[c24]]); n_delta_5_12<-paste0("delta_TS_",clean_test_name,"_5_12m"); if(all(c(c5,c12)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_5_12):=(as.numeric(.data[[c12]])-as.numeric(.data[[c5]])))}else{change_data_base_wide[[n_delta_5_12]]<-NA_real_}; n_delta_12_24<-paste0("delta_TS_",clean_test_name,"_12_24m"); if(all(c(c12,c24)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_12_24):=(as.numeric(.data[[c24]])-as.numeric(.data[[c12]])))}else{change_data_base_wide[[n_delta_12_24]]<-NA_real_}; n_delta_5_24<-paste0("delta_TS_",clean_test_name,"_5_24m"); if(all(c(c5,c24)%in%names(change_data_base_wide))){change_data_base_wide<-change_data_base_wide%>%dplyr::mutate(!!sym(n_delta_5_24):=(as.numeric(.data[[c24]])-as.numeric(.data[[c5]])))}else{change_data_base_wide[[n_delta_5_24]]<-NA_real_} }
  } else { cat("sub3ST is missing key columns for pivoting.\n"); change_data_base_wide <- data.frame() }
} else { cat("sub3ST is empty; cannot create change_data_base_wide.\n"); change_data_base_wide <- data.frame() }


run_correlation_generic <- function(df, var1_col, var2_col) {if(!all(c(var1_col, var2_col) %in% names(df))) return(list(estimate=NA, p.value=NA, formatted_string="Variable column(s) missing"));cd <- df %>% dplyr::select(SubID, all_of(c(var1_col, var2_col))) %>% tidyr::drop_na();if(nrow(cd) < 3) return(list(estimate=NA, p.value=NA, formatted_string="N<3"));if(sd(cd[[var1_col]], na.rm=TRUE) < .Machine$double.eps^0.5 || sd(cd[[var2_col]], na.rm=TRUE) < .Machine$double.eps^0.5) return(list(estimate=NA, p.value=NA, formatted_string="Zero variance"));res <- tryCatch(cor.test(cd[[var1_col]], cd[[var2_col]]), error = function(e) NULL);if(is.null(res)) return(list(estimate=NA, p.value=NA, formatted_string="cor.test error"));return(list(estimate = res$estimate, p.value = res$p.value, formatted_string = paste0(as.character(res$estimate), " (p=", as.character(res$p.value), ")")))}
run_partial_correlation_generic <- function(df, var1_col, var2_col, cov_cols_to_use) {if(!all(c(var1_col, var2_col) %in% names(df))) return(list(estimate=NA, p.value=NA, formatted_string="Variable column(s) missing"));actual_cov_cols_in_df <- intersect(cov_cols_to_use, names(df));if(length(cov_cols_to_use)>0 && length(actual_cov_cols_in_df)!=length(cov_cols_to_use)) return(list(estimate=NA, p.value=NA, formatted_string="Not all covs available"));vars_to_select <- c("SubID", var1_col, var2_col); if(length(actual_cov_cols_in_df)>0)vars_to_select<-c(vars_to_select,actual_cov_cols_in_df);cd <- df %>% dplyr::select(all_of(vars_to_select)) %>% tidyr::drop_na();if(nrow(cd)<(2+length(actual_cov_cols_in_df)+1))return(list(estimate=NA, p.value=NA, formatted_string=paste0("N<",(2+length(actual_cov_cols_in_df)+1))));cols_to_check_variance<-c(var1_col,var2_col);if(length(actual_cov_cols_in_df)>0)cols_to_check_variance<-c(cols_to_check_variance,actual_cov_cols_in_df);if(any(sapply(cd[,cols_to_check_variance,drop=FALSE],function(x){valid_x<-x[!is.na(x)];if(length(unique(valid_x))<2||sd(valid_x,na.rm=TRUE)<.Machine$double.eps^0.5)return(TRUE)else return(FALSE)})))return(list(estimate=NA, p.value=NA, formatted_string="Zero variance"));if(length(actual_cov_cols_in_df)==0){res<-tryCatch(cor.test(cd[[var1_col]],cd[[var2_col]]),error=function(e)NULL);if(is.null(res))return(list(estimate=NA,p.value=NA,formatted_string="cor.test error (fallback)"));return(list(estimate=res$estimate,p.value=res$p.value,formatted_string=paste0(as.character(res$estimate)," (p=",as.character(res$p.value),") [No Covs Used]")))};pcor_res<-tryCatch(ppcor::pcor.test(cd[[var1_col]],cd[[var2_col]],cd[,actual_cov_cols_in_df,drop=FALSE],method="pearson"),error=function(e)NULL);if(is.null(pcor_res))return(list(estimate=NA, p.value=NA, formatted_string="pcor error"));return(list(estimate=pcor_res$estimate,p.value=pcor_res$p.value,formatted_string=paste0(as.character(pcor_res$estimate)," (p=",as.character(pcor_res$p.value),")")))}

excel_output_list_correlations <- list() 
if (length(existing_test_score_cols) > 0 && nrow(change_data_base_wide) > 0 && inherits(change_data_base_wide, "data.frame")) {
  
  correlation_analysis_sets <- list(
    list(type="Corr", interval_label="5m_vs_12m", fa_delta_suffix="_5_12m", ts_delta_suffix="_5_12m", sheet_name_prefix="Corr_dFA_dTS", col_a_label="FA_Region_delta_5_12m"),
    list(type="Pcorr", interval_label="5m_vs_12m", fa_delta_suffix="_5_12m", ts_delta_suffix="_5_12m", sheet_name_prefix="Pcorr_dFA_dTS", col_a_label="FA_Region_delta_5_12m"),
    list(type="Corr", interval_label="12m_vs_24m", fa_delta_suffix="_12_24m", ts_delta_suffix="_12_24m", sheet_name_prefix="Corr_dFA_dTS", col_a_label="FA_Region_delta_12_24m"),
    list(type="Pcorr", interval_label="12m_vs_24m", fa_delta_suffix="_12_24m", ts_delta_suffix="_12_24m", sheet_name_prefix="Pcorr_dFA_dTS", col_a_label="FA_Region_delta_12_24m"),
    list(type="Corr", interval_label="Lagged_FA512_TS1224", fa_delta_suffix="_5_12m", ts_delta_suffix="_12_24m", sheet_name_prefix="Corr_Lagged_dFA_dTS", col_a_label="FA_Region_delta_5_12m"),
    list(type="Pcorr", interval_label="Lagged_FA512_TS1224", fa_delta_suffix="_5_12m", ts_delta_suffix="_12_24m", sheet_name_prefix="Pcorr_Lagged_dFA_dTS", col_a_label="FA_Region_delta_5_12m")
  )
  
  for(analysis_set in correlation_analysis_sets){
    cat(paste0("\nRunning Correlation Analysis: ", analysis_set$sheet_name_prefix, "_", analysis_set$interval_label, "\n"))
    
    matrix_col_names <- sapply(existing_test_score_cols, function(test_col_base) {
      clean_test_name <- gsub("[ /]", "_", test_col_base)
      return(paste0("delta_", clean_test_name, analysis_set$ts_delta_suffix))
    })
    
    results_matrix <- matrix(NA_character_, nrow=length(fornix_rois_change), ncol=length(matrix_col_names),
                             dimnames=list(fornix_rois_change, matrix_col_names))
    
    col_A_excel_header <- analysis_set$col_a_label
    
    for (j in seq_along(existing_test_score_cols)) { 
      current_test_col_base_name <- existing_test_score_cols[j]
      clean_test_name <- gsub("[ /]", "_", current_test_col_base_name)
      for (i in seq_along(fornix_rois_change)) { 
        current_fa_roi_base_name <- fornix_rois_change[i]
        clean_roi_name <- gsub("[ /]", "_", current_fa_roi_base_name)
        
        var1_col_name <- paste0("delta_FA_", clean_roi_name, analysis_set$fa_delta_suffix)
        var2_col_name <- paste0("delta_TS_", clean_test_name, analysis_set$ts_delta_suffix)
        
        result_item_obj <- NULL 
        if (var1_col_name != "" && var2_col_name != "") {
          if (analysis_set$type == "Corr") { result_item_obj <- run_correlation_generic(change_data_base_wide, var1_col_name, var2_col_name) } 
          else if (analysis_set$type == "Pcorr") { result_item_obj <- run_partial_correlation_generic(change_data_base_wide, var1_col_name, var2_col_name, existing_covariate_cols) }
          results_matrix[current_fa_roi_base_name, matrix_col_names[j]] <- if(is.list(result_item_obj)) result_item_obj$formatted_string else result_item_obj
        } else { results_matrix[current_fa_roi_base_name, matrix_col_names[j]] <- "Var names error" }
      }
    }
    sheet_name_full <- paste0(analysis_set$sheet_name_prefix, "_", gsub("[: /]", "_", analysis_set$interval_label)) 
    excel_output_list_correlations[[sheet_name_full]] <- as.data.frame(results_matrix) %>% tibble::rownames_to_column(var = col_A_excel_header)
  }
  
  if(length(excel_output_list_correlations)>0){
    write_xlsx(excel_output_list_correlations, path="correlations_analysis.xlsx") 
    cat("\nCorrelation results exported to 'correlations_analysis.xlsx'\n")
  } else {
    cat("\nNo correlation results generated.\n")
  }
} else {
  cat("\nNot enough data for correlation analyses.\n")
}

significant_correlation_plots_list <- list() 
plot_corr_viz_counter <- 0

if (exists("change_data_base_wide") && nrow(change_data_base_wide) > 0 && 
    length(existing_test_score_cols) > 0 && length(fornix_rois_change) > 0 &&
    length(existing_covariate_cols) > 0 && all(existing_covariate_cols %in% names(change_data_base_wide))) {
  
  for(analysis_set in correlation_analysis_sets){ 
    cat(paste0("\nChecking for correlation plots for analysis type: ", analysis_set$sheet_name_prefix, "_", analysis_set$interval_label, "\n"))
    for(roi_name in fornix_rois_change){
      clean_roi_name<-gsub("[ /]","_",roi_name)
      for(test_name in existing_test_score_cols){
        clean_test_name<-gsub("[ /]","_",test_name)
        
        var1_col_name <- paste0("delta_FA_", clean_roi_name, analysis_set$fa_delta_suffix)
        var2_col_name <- paste0("delta_TS_", clean_test_name, analysis_set$ts_delta_suffix)
        plot_type <- analysis_set$type 
        
        if (!all(c(var1_col_name, var2_col_name) %in% names(change_data_base_wide))) { next }
        
        current_result_obj <- NULL; p_to_check <- NA; estimate_to_report <- NA
        if (plot_type == "Corr") { current_result_obj <- run_correlation_generic(change_data_base_wide, var1_col_name, var2_col_name); if(is.list(current_result_obj)){p_to_check <- current_result_obj$p.value; estimate_to_report <- current_result_obj$estimate} } 
        else if (plot_type == "Pcorr") { current_result_obj <- run_partial_correlation_generic(change_data_base_wide, var1_col_name, var2_col_name, existing_covariate_cols); if(is.list(current_result_obj)){p_to_check <- current_result_obj$p.value; estimate_to_report <- current_result_obj$estimate} } 
        
        if (is.list(current_result_obj) && !is.null(p_to_check) && !is.na(p_to_check) && p_to_check < 0.05) {
          cat(paste0("  Significant ", plot_type, " for plotting: ", roi_name, " vs ", test_name, "\n"))
          data_for_plot <- change_data_base_wide %>% dplyr::select(SubID, all_of(var1_col_name), all_of(var2_col_name), all_of(existing_covariate_cols)) %>% tidyr::drop_na()
          if(nrow(data_for_plot) < 3) {cat("    N<3 for plot.\n"); next}
          data_for_plot <- data_for_plot %>% dplyr::mutate(var1_change_direction = factor(ifelse(.data[[var1_col_name]] > 1e-9, "Increasing Predictor", ifelse(.data[[var1_col_name]] < -1e-9, "Decreasing Predictor", "No Change")), levels = c("Increasing Predictor", "Decreasing Predictor", "No Change")))
          x_plot_var <- var1_col_name; y_plot_var <- var2_col_name; plot_title_detail <- paste(var1_col_name, "vs", var2_col_name)
          if (plot_type == "Pcorr" && length(existing_covariate_cols) > 0) {
            formula_var1_str <- paste0("`", var1_col_name, "` ~ ", paste(paste0("`", existing_covariate_cols, "`"), collapse = " + "))
            formula_var2_str <- paste0("`", var2_col_name, "` ~ ", paste(paste0("`", existing_covariate_cols, "`"), collapse = " + "))
            lm1 <- lm(as.formula(formula_var1_str), data = data_for_plot, na.action = na.exclude); lm2 <- lm(as.formula(formula_var2_str), data = data_for_plot, na.action = na.exclude)
            data_for_plot$res_var1 <- residuals(lm1); data_for_plot$res_var2 <- residuals(lm2)
            data_for_plot <- data_for_plot %>% tidyr::drop_na(res_var1, res_var2); if(nrow(data_for_plot) <3) {cat("    N<3 after residuals for plot.\n"); next}
            x_plot_var <- "res_var1"; y_plot_var <- "res_var2"; plot_title_detail <- paste("Residuals of", var1_col_name, "vs Residuals of", var2_col_name)
          }
          plot_title_main <- plot_type; if (plot_type == "Pcorr") plot_title_main <- paste0(plot_type, " (Controlling for ", paste(existing_covariate_cols, collapse=", "), ")")
          plot_subtitle_text <- paste0(plot_title_detail, "\nInterval: ", analysis_set$interval_label, "\nr = ", round(estimate_to_report, 3), ", p = ", format.pval(p_to_check, digits=3, eps=0.001))
          ggp <- ggplot(data_for_plot, aes(x = .data[[x_plot_var]], y = .data[[y_plot_var]], color = var1_change_direction)) + geom_point(alpha = 0.8, size = 2.5) + geom_smooth(method = "lm", aes(group=1), col = "blue", se = TRUE, linetype = "dashed") + scale_color_manual(values = c("Increasing Predictor" = "green", "Decreasing Predictor" = "red", "No Change" = "grey50"), name = paste("Direction of", var1_col_name)) + labs(title = plot_title_main, subtitle = plot_subtitle_text, x = x_plot_var, y = y_plot_var) + theme_minimal() + theme(legend.position = "bottom")
          if (interactive() && !is.null(grDevices::dev.list())) { print(ggp) }
          plot_corr_viz_counter <- plot_corr_viz_counter + 1
          significant_correlation_plots_list[[paste0("corr_plot_", plot_corr_viz_counter)]] <- ggp
        } 
      } 
    } 
  } 
  if (length(significant_correlation_plots_list) > 0) {cat("\nSaving significant correlation plots to PDF...\n");pdf("significant_correlations_plots.pdf",width=10,height=7);for(p_to_save in significant_correlation_plots_list){print(p_to_save)};dev.off();cat("PDF saved: significant_correlations_plots.pdf\n")}else{cat("No significant correlations to plot.\n")}
} 
cat("\n\n--- Summary of Participant Filtering ---\n")
num_sub3ST_final_count<-if(exists("sub3ST")&&is.data.frame(sub3ST)&&nrow(sub3ST)>0)dplyr::n_distinct(sub3ST$SubID)else 0 
cat(paste0("Number of unique participants in sub3ST (3 valid FA scans AND complete Test Scores/Demographics): ",num_sub3ST_final_count,"\n"))



